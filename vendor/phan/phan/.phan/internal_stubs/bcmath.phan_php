<?php
// These stubs were generated by the phan stub generator.
// @phan-stub-for-extension bcmath@8.4.7

namespace BcMath {
final class Number implements \Stringable {

    // properties
    public $value;
    public $scale;

    // methods
    public function __construct(int|string $num) {}
    public function add(\BcMath\Number|int|string $num, ?int $scale = null) : \BcMath\Number {}
    public function sub(\BcMath\Number|int|string $num, ?int $scale = null) : \BcMath\Number {}
    public function mul(\BcMath\Number|int|string $num, ?int $scale = null) : \BcMath\Number {}
    public function div(\BcMath\Number|int|string $num, ?int $scale = null) : \BcMath\Number {}
    public function mod(\BcMath\Number|int|string $num, ?int $scale = null) : \BcMath\Number {}
    public function divmod(\BcMath\Number|int|string $num, ?int $scale = null) : array {}
    public function powmod(\BcMath\Number|int|string $exponent, \BcMath\Number|int|string $modulus, ?int $scale = null) : \BcMath\Number {}
    public function pow(\BcMath\Number|int|string $exponent, ?int $scale = null) : \BcMath\Number {}
    public function sqrt(?int $scale = null) : \BcMath\Number {}
    public function floor() : \BcMath\Number {}
    public function ceil() : \BcMath\Number {}
    public function round(int $precision = 0, \RoundingMode $mode = \RoundingMode::HalfAwayFromZero) : \BcMath\Number {}
    public function compare(\BcMath\Number|int|string $num, ?int $scale = null) : int {}
    public function __toString() : string {}
    public function __serialize() : array {}
    public function __unserialize(array $data) : void {}
}

}

namespace {
function bcadd(string $num1, string $num2, ?int $scale = null) : string {}
function bcceil(string $num) : string {}
function bccomp(string $num1, string $num2, ?int $scale = null) : int {}
function bcdiv(string $num1, string $num2, ?int $scale = null) : string {}
function bcdivmod(string $num1, string $num2, ?int $scale = null) : array {}
function bcfloor(string $num) : string {}
function bcmod(string $num1, string $num2, ?int $scale = null) : string {}
function bcmul(string $num1, string $num2, ?int $scale = null) : string {}
function bcpow(string $num, string $exponent, ?int $scale = null) : string {}
function bcpowmod(string $num, string $exponent, string $modulus, ?int $scale = null) : string {}
function bcround(string $num, int $precision = 0, \RoundingMode $mode = \RoundingMode::HalfAwayFromZero) : string {}
function bcscale(?int $scale = null) : int {}
function bcsqrt(string $num, ?int $scale = null) : string {}
function bcsub(string $num1, string $num2, ?int $scale = null) : string {}
}

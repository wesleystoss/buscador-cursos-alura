<?php
// These stubs were generated by the phan stub generator.
// @phan-stub-for-extension zip@1.22.5

namespace {
class ZipArchive implements \Countable {

    // constants
    const CREATE = 1;
    const EXCL = 2;
    const CHECKCONS = 4;
    const OVERWRITE = 8;
    const RDONLY = 16;
    const FL_NOCASE = 1;
    const FL_NODIR = 2;
    const FL_COMPRESSED = 4;
    const FL_UNCHANGED = 8;
    const FL_RECOMPRESS = 16;
    const FL_ENCRYPTED = 32;
    const FL_OVERWRITE = 8192;
    const FL_LOCAL = 256;
    const FL_CENTRAL = 512;
    const FL_ENC_GUESS = 0;
    const FL_ENC_RAW = 64;
    const FL_ENC_STRICT = 128;
    const FL_ENC_UTF_8 = 2048;
    const FL_ENC_CP437 = 4096;
    const FL_OPEN_FILE_NOW = 1073741824;
    const CM_DEFAULT = -1;
    const CM_STORE = 0;
    const CM_SHRINK = 1;
    const CM_REDUCE_1 = 2;
    const CM_REDUCE_2 = 3;
    const CM_REDUCE_3 = 4;
    const CM_REDUCE_4 = 5;
    const CM_IMPLODE = 6;
    const CM_DEFLATE = 8;
    const CM_DEFLATE64 = 9;
    const CM_PKWARE_IMPLODE = 10;
    const CM_BZIP2 = 12;
    const CM_LZMA = 14;
    const CM_LZMA2 = 33;
    const CM_XZ = 95;
    const CM_TERSE = 18;
    const CM_LZ77 = 19;
    const CM_WAVPACK = 97;
    const CM_PPMD = 98;
    const ER_OK = 0;
    const ER_MULTIDISK = 1;
    const ER_RENAME = 2;
    const ER_CLOSE = 3;
    const ER_SEEK = 4;
    const ER_READ = 5;
    const ER_WRITE = 6;
    const ER_CRC = 7;
    const ER_ZIPCLOSED = 8;
    const ER_NOENT = 9;
    const ER_EXISTS = 10;
    const ER_OPEN = 11;
    const ER_TMPOPEN = 12;
    const ER_ZLIB = 13;
    const ER_MEMORY = 14;
    const ER_CHANGED = 15;
    const ER_COMPNOTSUPP = 16;
    const ER_EOF = 17;
    const ER_INVAL = 18;
    const ER_NOZIP = 19;
    const ER_INTERNAL = 20;
    const ER_INCONS = 21;
    const ER_REMOVE = 22;
    const ER_DELETED = 23;
    const ER_ENCRNOTSUPP = 24;
    const ER_RDONLY = 25;
    const ER_NOPASSWD = 26;
    const ER_WRONGPASSWD = 27;
    const ER_OPNOTSUPP = 28;
    const ER_INUSE = 29;
    const ER_TELL = 30;
    const ER_COMPRESSED_DATA = 31;
    const ER_CANCELLED = 32;
    const AFL_RDONLY = 2;
    const OPSYS_DOS = 0;
    const OPSYS_AMIGA = 1;
    const OPSYS_OPENVMS = 2;
    const OPSYS_UNIX = 3;
    const OPSYS_VM_CMS = 4;
    const OPSYS_ATARI_ST = 5;
    const OPSYS_OS_2 = 6;
    const OPSYS_MACINTOSH = 7;
    const OPSYS_Z_SYSTEM = 8;
    const OPSYS_CPM = 9;
    const OPSYS_WINDOWS_NTFS = 10;
    const OPSYS_MVS = 11;
    const OPSYS_VSE = 12;
    const OPSYS_ACORN_RISC = 13;
    const OPSYS_VFAT = 14;
    const OPSYS_ALTERNATE_MVS = 15;
    const OPSYS_BEOS = 16;
    const OPSYS_TANDEM = 17;
    const OPSYS_OS_400 = 18;
    const OPSYS_OS_X = 19;
    const OPSYS_DEFAULT = 3;
    const EM_NONE = 0;
    const EM_TRAD_PKWARE = 1;
    const EM_AES_128 = 257;
    const EM_AES_192 = 258;
    const EM_AES_256 = 259;
    const EM_UNKNOWN = 65535;
    const LIBZIP_VERSION = '1.7.3';
    const LENGTH_TO_END = 0;

    // properties
    public $comment;
    public $filename;
    public $numFiles;
    public $status;
    public $statusSys;
    public $lastId;

    // methods
    public function open(string $filename, int $flags = 0) : bool|int {}
    public function setPassword(string $password) : bool {}
    public function close() : bool {}
    public function count() : int {}
    public function getStatusString() : string {}
    public function clearError() : void {}
    public function addEmptyDir(string $dirname, int $flags = 0) : bool {}
    public function addFromString(string $name, string $content, int $flags = \ZipArchive::FL_OVERWRITE) : bool {}
    public function addFile(string $filepath, string $entryname = '', int $start = 0, int $length = \ZipArchive::LENGTH_TO_END, int $flags = \ZipArchive::FL_OVERWRITE) : bool {}
    public function replaceFile(string $filepath, int $index, int $start = 0, int $length = \ZipArchive::LENGTH_TO_END, int $flags = 0) : bool {}
    public function addGlob(string $pattern, int $flags = 0, array $options = []) : array|false {}
    public function addPattern(string $pattern, string $path = '.', array $options = []) : array|false {}
    public function renameIndex(int $index, string $new_name) : bool {}
    public function renameName(string $name, string $new_name) : bool {}
    public function setArchiveComment(string $comment) : bool {}
    public function getArchiveComment(int $flags = 0) : false|string {}
    public function setArchiveFlag(int $flag, int $value) : bool {}
    public function getArchiveFlag(int $flag, int $flags = 0) : int {}
    public function setCommentIndex(int $index, string $comment) : bool {}
    public function setCommentName(string $name, string $comment) : bool {}
    public function setMtimeIndex(int $index, int $timestamp, int $flags = 0) : bool {}
    public function setMtimeName(string $name, int $timestamp, int $flags = 0) : bool {}
    public function getCommentIndex(int $index, int $flags = 0) : false|string {}
    public function getCommentName(string $name, int $flags = 0) : false|string {}
    public function deleteIndex(int $index) : bool {}
    public function deleteName(string $name) : bool {}
    public function statName(string $name, int $flags = 0) : array|false {}
    public function statIndex(int $index, int $flags = 0) : array|false {}
    public function locateName(string $name, int $flags = 0) : false|int {}
    public function getNameIndex(int $index, int $flags = 0) : false|string {}
    public function unchangeArchive() : bool {}
    public function unchangeAll() : bool {}
    public function unchangeIndex(int $index) : bool {}
    public function unchangeName(string $name) : bool {}
    public function extractTo(string $pathto, array|null|string $files = null) : bool {}
    public function getFromName(string $name, int $len = 0, int $flags = 0) : false|string {}
    public function getFromIndex(int $index, int $len = 0, int $flags = 0) : false|string {}
    public function getStreamIndex(int $index, int $flags = 0) {}
    public function getStreamName(string $name, int $flags = 0) {}
    public function getStream(string $name) {}
    public function setExternalAttributesName(string $name, int $opsys, int $attr, int $flags = 0) : bool {}
    public function setExternalAttributesIndex(int $index, int $opsys, int $attr, int $flags = 0) : bool {}
    public function getExternalAttributesName(string $name, &$opsys, &$attr, int $flags = 0) : bool {}
    public function getExternalAttributesIndex(int $index, &$opsys, &$attr, int $flags = 0) : bool {}
    public function setCompressionName(string $name, int $method, int $compflags = 0) : bool {}
    public function setCompressionIndex(int $index, int $method, int $compflags = 0) : bool {}
    public function setEncryptionName(string $name, int $method, ?string $password = null) : bool {}
    public function setEncryptionIndex(int $index, int $method, ?string $password = null) : bool {}
    public function registerProgressCallback(float $rate, callable $callback) : bool {}
    public function registerCancelCallback(callable $callback) : bool {}
    public static function isCompressionMethodSupported(int $method, bool $enc = true) : bool {}
    public static function isEncryptionMethodSupported(int $method, bool $enc = true) : bool {}
}

function zip_close($zip) : void {}
function zip_entry_close($zip_entry) : bool {}
function zip_entry_compressedsize($zip_entry) : false|int {}
function zip_entry_compressionmethod($zip_entry) : false|string {}
function zip_entry_filesize($zip_entry) : false|int {}
function zip_entry_name($zip_entry) : false|string {}
function zip_entry_open($zip_dp, $zip_entry, string $mode = 'rb') : bool {}
function zip_entry_read($zip_entry, int $len = 1024) : false|string {}
function zip_open(string $filename) {}
function zip_read($zip) {}
}
